 Spring Cloud 是什么
Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，
如服务发现注册、配置中心 earuka、
api网关 zull、
消息总线 spring cloud bus、
负载均衡 feign ribbon、
限流和熔断 hystrix、
数据监控等，
都可以用Spring Boot的开发风格做到一键启动和部署。 

SpringCloud的优缺点
优点：

1.耦合度比较低。不会影响其他模块的开发。 
2.减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发。 
3.配置比较简单，基本用注解就能实现，不用使用过多的配置文件。 
4.微服务跨平台的，可以用任何一种语言开发。 
5.每个微服务可以有自己的独立的数据库也有用公共的数据库。 
6.直接写后端的代码，不用关注前端怎么开发，直接写自己的后端代码即可，然后暴露接口，通过组件进行服务通信。 

缺点：
1.部署比较麻烦，给运维工程师带来一定的麻烦。 
2.针对数据的管理比麻烦，因为微服务可以每个微服务使用一个数据库。 
3.系统集成测试比较麻烦 
4.性能的监控比较麻烦。【最好开发一个大屏监控系统】
总的来说优点大过于缺点，目前看来Spring Cloud是一套非常完善的分布式框架，目前很多企业开始用微服务、Spring Cloud的优势是显而易见的。因此对于想研究微服务架构的同学来说，学习Spring Cloud是一个不错的选择。 


 SpringCloud由什么组成
这就有很多了，我讲几个开发中最重要的 
Spring Cloud Eureka：服务注册与发现 
Spring Cloud Zuul：服务网关 
Spring Cloud Ribbon：客户端负载均衡 
Spring Cloud Feign：声明性的Web服务客户端 
Spring Cloud Hystrix：断路器 
Spring Cloud Confifig：分布式统一配置管理 


什么是Eureka
Eureka作为SpringCloud的服务注册功能服务器，他是服务注册中心，系统中的其他服务使用Eureka的客户端将其连接到Eureka Service中，并且保持心跳，这样工作人员可以通过EurekaService来监控各个微服务是否运行正常


什么是Eureka的自我保护模式，
默认情况下，如果Eureka Service统计到有大量的 Eureka Client 没有上送心跳，Eureka Service会进入自我保护模式，在该模式下Eureka Service会保护服务注册表中的信息，不在删除注册表中的数据，当网络故障恢复后，Eureka Servic 节点会自动退出自我保护模式 



Eureka和ZooKeeper都可以提供服务注册与发现的功能,请说说两个的区别
ZooKeeper中的节点服务挂了就要选举 在选举期间注册服务瘫痪,虽然服务最终会恢复,但是选举期间不可用的， 选举就是改微服务做了集群，必须有一台主其他的都是从 
Eureka各个节点是平等关系,服务器挂了没关系，只要有一台Eureka就可以保证服务可用，数据都是最新的。 如果查询到的数据并不是最新的，就是因为Eureka的自我保护模式导致的 
Eureka可以很好的应对因网络故障导致部分节点失去联系的情况,而不会像ZooKeeper 一样使得整个注册系统瘫痪 
ZooKeeper保证的是CP，Eureka保证的是AP
CAP： C：一致性>Consistency; 取舍：(强一致性、单调一致性、会话一致性、最终一致性、弱一致性) A：可用性>Availability; P：分区容错性>Partition tolerance;


什么是网关?
网关相当于一个网络服务架构的入口，所有网络请求必须通过网关转发到具体的服务。 
网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。 


Zuul与Nginx有什么区别？
Zuul是java语言实现的，主要为java服务提供网关服务，尤其在微服务架构中可以更加灵活的对网关进行操作。Nginx是使用C语言实现，性能高于Zuul，但是实现自定义操作需要熟悉lua语言，对程序员要求较高，可以使用Nginx做Zuul集群。

既然Nginx可以实现网关？为什么还需要使用Zuul框架
Zuul是SpringCloud集成的网关，使用Java语言编写，可以对SpringCloud架构提供更灵活的服务。 




Nginx与Ribbon的区别
Ribbon是客户端实现的负载均衡
Nginx是服务端实现的负载均衡


Ribbon底层实现原理
Ribbon使用discoveryClient从注册中心读取目标服务信息
ribbon负载均衡的流程。
发送请求，被LoadBalancerInterceptor拦截器拦截，请求被交给ribbon来处理
拦截器拦截请求，交给了RibbonLoadBalancerClient的execute方法（下面的逻辑都是包含在这个方法中）
在进行负载均衡之前首先得知道有哪些服务实例信息，所以通过DynamicServerListLoadBalancer的updateListOfServers方法从注册中心（Eureka）那里获取到了所有的服务实例信息，并且会定时更新
使用负载均衡算法（默认轮询算法）从所有的服务实例信息中选择一台机器出来
将请求发送给负载均衡选择出来的服务实例上去
https://cloud.tencent.com/developer/article/1699957

@LoadBalanced注解的作用
开启客户端负载均衡。






Eurka 工作流程
1、Eureka Server 启动成功，等待服务端注册。在启动过程中如果配置了集群，集群之间定时通过 Replicate 同步注册表，每个 Eureka Server 都存在独立完整的服务注册表信息
2、Eureka Client 启动时根据配置的 Eureka Server 地址去注册中心注册服务
3、Eureka Client 会每 30s 向 Eureka Server 发送一次心跳请求，证明客户端服务正常
4、当 Eureka Server 90s 内没有收到 Eureka Client 的心跳，注册中心则认为该节点失效，会注销该实例
5、单位时间内 Eureka Server 统计到有大量的 Eureka Client 没有上送心跳，则认为可能为网络异常，进入自我保护机制，不再剔除没有上送心跳的客户端
6、当 Eureka Client 心跳请求恢复正常之后，Eureka Server 自动退出自我保护模式
7、Eureka Client 定时全量或者增量从注册中心获取服务注册表，并且将获取到的信息缓存到本地
8、服务调用时，Eureka Client 会先从本地缓存找寻调取的服务。如果获取不到，先从注册中心刷新注册表，再同步到本地缓存
9、Eureka Client 获取到目标服务器信息，发起服务调用
10、Eureka Client 程序关闭时向 Eureka Server 发送取消请求，Eureka Server 将实例从注册表中删除


服务降级底层是如何实现的？
Hystrix实现服务降级的功能是通过重写HystrixCommand中的getFallback()方法，当Hystrix的run方法或construct执行发生错误时转而执行getFallback()方法。 


















